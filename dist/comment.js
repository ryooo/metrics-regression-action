"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCommentWithoutRun = exports.createCommentWithRun = void 0;
const metric_1 = require("./metric");
const createCommentWithRun = ({ event, artifactName, sha: currentHash, targetRun, result, }) => {
    const [owner, repoName] = event.repository.full_name.split('/');
    const targetHash = targetRun.head_sha;
    const currentHashShort = currentHash.slice(0, 7);
    const targetHashShort = targetHash.slice(0, 7);
    const body = `This report was generated by comparing [${currentHashShort}](https://github.com/${owner}/${repoName}/commit/${currentHash}) with [${targetHashShort}](https://github.com/${owner}/${repoName}/commit/${targetHash}).
If you would like to check difference, please check [here](https://github.com/${owner}/${repoName}/compare/${targetHashShort}..${currentHashShort}).

${badge(result)}
## ArtifactName: \`${artifactName}\

${isSuccess(result) && '✨✨ There is no over threshold metrics! ✨✨'}

${metricsReport('📝 Over threshold metrics', result.overThresholdMetrics)}
${metricsReport('📝 Within threshold metrics', result.withinThresholdMetrics)}

${accordionMetricsReport('📝 New metrics', result.newMetrics)}
${accordionMetricsReport('⚠️ Deleted metrics', result.deletedMetrics)}
`;
    return body;
};
exports.createCommentWithRun = createCommentWithRun;
const createCommentWithoutRun = ({ result, artifactName }) => {
    const body = `## ArtifactName: \`${artifactName}\`
  
Failed to find a target artifact.
All items will be treated as new items and will be used as expected data for the next time.

![target not found](https://img.shields.io/badge/%E2%9C%94%20reg-new%20items-blue)
${result.newMetrics.length > 0 ? metricsToTable(result.newMetrics) : 'no metrics found.'}`;
    return body;
};
exports.createCommentWithoutRun = createCommentWithoutRun;
const metricsReport = (title, metrics, messageForNothing = '') => {
    const report = metricsToTable(metrics, messageForNothing);
    return `
### ${title}

${report}
  `;
};
const accordionMetricsReport = (title, metrics, messageForNothing = '') => {
    const report = metricsToTable(metrics, messageForNothing);
    return `
<details>
<summary>${title}</summary>

${report}
</details>
  `;
};
const metricsToTable = (metrics, messageForNothing = '') => {
    if (metrics.length === 0)
        return messageForNothing;
    return `
| file | metrics | value |
|:-----|:--------|:-----:|
${metrics.map(metric_1.metricToTd).join('\n')}`;
};
const isSuccess = (result) => {
    return (result.overThresholdMetrics.length === 0 && result.newMetrics.length === 0 && result.deletedMetrics.length === 0);
};
const badge = (result) => {
    if (result.overThresholdMetrics.length) {
        return '![change detected](https://img.shields.io/badge/%E2%9C%94%20reg-change%20detected-orange)';
    }
    if (result.newMetrics.length) {
        return '![new items](https://img.shields.io/badge/%E2%9C%94%20reg-new%20items-green)';
    }
    return '![success](https://img.shields.io/badge/%E2%9C%94%20reg-passed-green)';
};
//# sourceMappingURL=comment.js.map